dnl Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)

AC_INIT([cppcms], [0.95.0], [artyomtnk@yahoo.com])
AC_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE([1.9 foreign])

AC_PROG_CXX
AC_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)

AC_LANG_CPLUSPLUS
AC_CONFIG_FILES([Makefile])

case $host in
	*solaris*)
		echo "Adding -pthreads for Solaris host"
		CXXFLAGS="-pthreads $CXXFLAGS" 
		LDFLAGS="-pthreads $LDFLAGS" 
esac

AC_SEARCH_LIBS(pthread_sigmask,thr kse pthread,[],[echo "Posix threads library not found" ; exit 1])

SAVE_LIBS=$LIBS

AC_SEARCH_LIBS(deflate,z zlib zdll,[],[echo "ZLib not found, exititing" ; exit 1])

BOOST_LIBS=$LIBS
LIBS=$SAVE_LIBS

AC_CHECK_LIB(icuuc,main,[],[ echo "icuuc Not found, aborting" ; exit 1 ])
AC_CHECK_LIB(icui18n,main,[],[ echo "icui18m Not found, aborting" ; exit 1 ])
AC_CHECK_LIB(icudt,main,[],[
	AC_CHECK_LIB(icudata,main,[],[ cho "icudata/icudt Not found, aborting" ; exit 1 ])
	])

AC_SEARCH_LIBS(clock_gettime,rt,[],[])

AC_CHECK_LIB(gcrypt,main,[],[])
AM_CONDITIONAL(ENABLE_GCRYPT,[test "x$ac_cv_lib_grcrypt_main" = "xyes" ])


AC_TRY_COMPILE([],[volatile long v;__sync_add_and_fetch(&v,1);],
		[AC_DEFINE([HAVE_SYNC_FETCH_AND_ADD],[],["Have __sync_fetch_and_add"])
			echo "__sync_add_and_fetch... ok"],[echo "__sync_add_and_fetch ... not supported"])

AC_TRY_COMPILE([#include <list>
		],
		[std::list<int> l; auto p=l.begin();],
		[AC_DEFINE([HAVE_CPP_0X_AUTO],[],["Have C++0x auto"])
			have_auto_type_detection=yes
			echo "C++0x auto... ok"	],[echo "C++0x auto... not supported"])
AC_TRY_COMPILE([#include <list>
		],
		[std::list<int> l; decltype(l.begin()) p=l.begin();],
		[AC_DEFINE([HAVE_CPP_0X_DECLTYPE],[],["Have C++0x decltype"])
			have_auto_type_detection=yes
			echo "C++0x decltype... ok"],[echo "C++0x decltype... not supported"])
AC_TRY_COMPILE([#include <list>
		],
		[std::list<int> l; typeof(l.begin()) p=l.begin();],
		[AC_DEFINE([HAVE_GCC_TYPEOF],[],["Have g++ typeof"])
			have_auto_type_detection=yes
			echo "g++ typeof... ok"],[echo "g++ typeof... not supported"])
AC_TRY_COMPILE([#include <list>
		],
		[std::list<int> l; __typeof__(l.begin()) p=l.begin();],
		[AC_DEFINE([HAVE_UNDERSCORE_TYPEOF],[],["Have g++ typeof"])
			have_auto_type_detection=yes
			echo "__typeof__... ok"],[echo "__typeof__... not supported"])


case $host in
	*win*) 
		CXXFLAGS="-D_WIN32_WINNT -D__USE_W32_SOCKETS $CXXFLAGS"
		LIBS="-lws2_32 -lwsock32 $LIBS"
		windows=yes 
esac

case $host in 
	*cygwin*)
		cygwin=yes 
esac


AC_SEARCH_LIBS(dlopen,dl)

CPPCMS_LIBS=$LIBS
LIBS=$SAVE_LIBS

AM_CONDITIONAL(WIN32,[ test "x$windows" = "xyes" ])
AM_CONDITIONAL(WIN_NOT_CYGWIN,[ test "x$windows" = "xyes" && test "x$cygwin" != "xyes" ])
AC_SUBST(CPPCMS_LIBS)
AC_SUBST(BOOST_LIBS)
AC_OUTPUT
